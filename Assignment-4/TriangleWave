#include <msp430g2553.h>
#define cycles 40000 // 20ms period for 2MHz.
#define Vpp  2200
#define Voff 1120
#define limit 130
#define Vchange 16
#define rampCycles 134

void Drive_DAC(unsigned int level);
volatile unsigned int level = Voff;
int count = 0;
int main(void)
{
  WDTCTL = WDTPW + WDTHOLD;        // Stop watchdog timer

  // 16Mhz SMCLK
  if (CALBC1_16MHZ==0xFF)		     // If calibration constant erased
  {
    while(1);                        // do not load, trap CPU!!
  }
  DCOCTL = 0;                        // Select lowest DCOx and MODx settings
  BCSCTL1 = CALBC1_16MHZ;            // Set range
  DCOCTL = CALDCO_16MHZ;             // Set DCO step + modulation
  CCTL0 = CCIE;                      // CCR0 interrupt enabled
  CCR0 = cycles;
  // SMCLK, continuous mode, div 8
  TACTL = TASSEL_2 + ID_3+ MC_2;

  // Init Ports
  P1DIR |= BIT4 +BIT0 + BIT6;                     // Will use BIT4 to activate /CE on the DAC

  P1SEL  = BIT7 + BIT5;  // These two lines dedicate P1.7 and P1.5
  P1SEL2 = BIT7 + BIT5;   // for UCB0SIMO and UCB0CLK respectively

  // SPI Setup
  // clock inactive state = low,
  // MSB first, 8-bit SPI master,
  // 4-pin active Low STE, synchronous
  //
  // 4-bit mode disabled for now
  UCB0CTL0 |= UCCKPL + UCMSB + UCMST + /* UCMODE_2 */ + UCSYNC;


  UCB0CTL1 |= UCSSEL_2;               // UCB0 will use SMCLK as the basis for
                                      // the SPI bit clock

  // Sets SMCLK divider to 16,
  // hence making SPI SCLK equal
  // to SMCLK/1 = 16MHz
  UCB0BR0 |= 0x01;             // (low divider byte) 0001 0000
  UCB0BR1 |= 0x00;             // (high divider byte)


  UCB0CTL1 &= ~UCSWRST;        // **Initialize USCI state machine**
                               // SPI now Waiting for something to
                               // be placed in TXBUF.

  _enable_interrupts();

} // end of main


void Drive_DAC(unsigned int level){
  unsigned int DAC_Word = 0;

  DAC_Word = (0x3000) | (level & 0x0FFF);   // 0x1000 sets DAC for Write
                                            // to DAC, Gain = 1, /SHDN = 1
                                            // and put 12-bit level value
                                            // in low 12 bits.

  P1OUT &= ~BIT4;                    // Clear P1.4 (drive /CS low on DAC)
                                     // Using a port output to do this for now

  UCB0TXBUF = (DAC_Word >> 8);       // Shift upper byte of DAC_Word
                                     // 8-bits to right

  while (!(IFG2 & UCB0TXIFG));       // USCI_A0 TX buffer ready?

  UCB0TXBUF = (unsigned char)
		       (DAC_Word & 0x00FF);  // Transmit lower byte to DAC

  while (!(IFG2 & UCB0TXIFG));       // USCI_A0 TX buffer ready?
  __delay_cycles(200);               // Delay 200 16 MHz SMCLK periods
                                     // (12.5 us) to allow SIMO to complete
  P1OUT |= BIT4;                     // Set P1.4   (drive /CS high on DAC)
  return;
}

#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timer_A (void)
{
  // Square Wave
/*
  if( level == Voff){
	  P1OUT ^= BIT0;
	  level = Voff +Vpp;
	  Drive_DAC(level);
	  CCR0 += 20000;

  }
  else{
	  P1OUT ^= BIT6;
	  level = Voff;
	  Drive_DAC(level);
	  CCR0 += 20000
  }
*/

	// Triangle
  if(count < limit){
  	  level += Vchange;
  	  Drive_DAC(level);
  	  P1OUT |= BIT0; // check to see if we've entered the function
	  CCR0 += rampCycles; // 33.3us
	  count++;
  }
  else if(count >= limit && count < limit*2)
   {
	  level -= Vchange;
	  Drive_DAC(level);
	  CCR0 += rampCycles;
	  count++;
  }

  else{
	  count = 0;
	  CCR0 += rampCycles;
  }

}


// no interrupts for now

//#pragma vector=USCIAB0TX_VECTOR
//__interrupt void USCIAB0TX_ISR(void)
//{
//  // Test for valid RX and TX character
//  volatile unsigned int i;
//}

